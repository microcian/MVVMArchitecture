plugins {
    id 'com.android.application'
    id 'kotlin-android'
    // used for synthetic binding, @Parcelize annotation
    id 'kotlin-android-extensions'
    // used for data binding
    id 'kotlin-kapt'
    // used for navigation safe args
    id 'androidx.navigation.safeargs.kotlin'
    // used for dependency injection
    id 'dagger.hilt.android.plugin'
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}

android {
    compileSdkVersion rootProject.compile_sdk_version
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.abe.boilerplatemvvm"
        minSdkVersion rootProject.min_sdk_version
        targetSdkVersion rootProject.target_sdk_version
        versionCode rootProject.release_version_code
        versionName rootProject.release_nersion_name
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "default"
    }

    flavorDimensions 'default'
    productFlavors {
        Dev {
            dimension 'default'
            applicationIdSuffix ".dev"
            buildConfigField "String", "BASE_URL", "\"${getProperty("local.properties", "base_url_staging")}\""
        }
        Prod {
            dimension 'default'
            buildConfigField "String", "BASE_URL", "\"${getProperty("local.properties", "base_url_live")}\""
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField "String", "API_KEY", "\"${getProperty("local.properties", "api_key")}\""
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_KEY", "\"${getProperty("local.properties", "api_key")}\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    kapt {
        correctErrorTypes = true
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    dataBinding.enabled true
    buildFeatures {
        viewBinding true
    }
    androidExtensions {
        features = ["parcelize"]
        experimental = true
    }
    lintOptions {
        disable "UnsafeExperimentalUsageError", "UnsafeExperimentalUsageWarning"
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // -------------- Architecture -------------- //
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    // UI - UX
    implementation 'com.google.android:flexbox:2.0.1'
    implementation "io.coil-kt:coil:1.1.1"
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    // LiveData - ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    // -------------- Architecture End -------------- //

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Retrofit
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:$firebase")

    // intuit: dimens for dynamic layout building
    implementation "com.intuit.sdp:sdp-android:$intuit_version"
    implementation "com.intuit.ssp:ssp-android:$intuit_version"

    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "io.mockk:mockk:1.10.6"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "io.mockk:mockk-android:1.10.6"

    // Persistence
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
}